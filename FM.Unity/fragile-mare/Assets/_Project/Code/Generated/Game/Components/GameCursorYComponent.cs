//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCursorY;

    public static Entitas.IMatcher<GameEntity> CursorY {
        get {
            if (_matcherCursorY == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CursorY);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCursorY = matcher;
            }

            return _matcherCursorY;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Project.Code.Gameplay.Input.CursorY cursorY { get { return (_Project.Code.Gameplay.Input.CursorY)GetComponent(GameComponentsLookup.CursorY); } }
    public float CursorY { get { return cursorY.Value; } }
    public bool hasCursorY { get { return HasComponent(GameComponentsLookup.CursorY); } }

    public GameEntity AddCursorY(float newValue) {
        var index = GameComponentsLookup.CursorY;
        var component = (_Project.Code.Gameplay.Input.CursorY)CreateComponent(index, typeof(_Project.Code.Gameplay.Input.CursorY));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCursorY(float newValue) {
        var index = GameComponentsLookup.CursorY;
        var component = (_Project.Code.Gameplay.Input.CursorY)CreateComponent(index, typeof(_Project.Code.Gameplay.Input.CursorY));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCursorY() {
        RemoveComponent(GameComponentsLookup.CursorY);
        return this;
    }
}

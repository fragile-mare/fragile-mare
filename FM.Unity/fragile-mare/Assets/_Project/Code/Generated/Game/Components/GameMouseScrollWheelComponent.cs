//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMouseScrollWheel;

    public static Entitas.IMatcher<GameEntity> MouseScrollWheel {
        get {
            if (_matcherMouseScrollWheel == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MouseScrollWheel);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMouseScrollWheel = matcher;
            }

            return _matcherMouseScrollWheel;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Project.Code.Gameplay.Input.MouseScrollWheel mouseScrollWheel { get { return (_Project.Code.Gameplay.Input.MouseScrollWheel)GetComponent(GameComponentsLookup.MouseScrollWheel); } }
    public float MouseScrollWheel { get { return mouseScrollWheel.Value; } }
    public bool hasMouseScrollWheel { get { return HasComponent(GameComponentsLookup.MouseScrollWheel); } }

    public GameEntity AddMouseScrollWheel(float newValue) {
        var index = GameComponentsLookup.MouseScrollWheel;
        var component = (_Project.Code.Gameplay.Input.MouseScrollWheel)CreateComponent(index, typeof(_Project.Code.Gameplay.Input.MouseScrollWheel));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMouseScrollWheel(float newValue) {
        var index = GameComponentsLookup.MouseScrollWheel;
        var component = (_Project.Code.Gameplay.Input.MouseScrollWheel)CreateComponent(index, typeof(_Project.Code.Gameplay.Input.MouseScrollWheel));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMouseScrollWheel() {
        RemoveComponent(GameComponentsLookup.MouseScrollWheel);
        return this;
    }
}

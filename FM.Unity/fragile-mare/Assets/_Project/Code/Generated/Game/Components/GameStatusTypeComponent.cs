//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherStatusType;

    public static Entitas.IMatcher<GameEntity> StatusType {
        get {
            if (_matcherStatusType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.StatusType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherStatusType = matcher;
            }

            return _matcherStatusType;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public _Project.Code.Gameplay.Features.Status.StatusTypeComponent statusType { get { return (_Project.Code.Gameplay.Features.Status.StatusTypeComponent)GetComponent(GameComponentsLookup.StatusType); } }
    public _Project.Code.Gameplay.Features.Status.StatusType StatusType { get { return statusType.Value; } }
    public bool hasStatusType { get { return HasComponent(GameComponentsLookup.StatusType); } }

    public GameEntity AddStatusType(_Project.Code.Gameplay.Features.Status.StatusType newValue) {
        var index = GameComponentsLookup.StatusType;
        var component = (_Project.Code.Gameplay.Features.Status.StatusTypeComponent)CreateComponent(index, typeof(_Project.Code.Gameplay.Features.Status.StatusTypeComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceStatusType(_Project.Code.Gameplay.Features.Status.StatusType newValue) {
        var index = GameComponentsLookup.StatusType;
        var component = (_Project.Code.Gameplay.Features.Status.StatusTypeComponent)CreateComponent(index, typeof(_Project.Code.Gameplay.Features.Status.StatusTypeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveStatusType() {
        RemoveComponent(GameComponentsLookup.StatusType);
        return this;
    }
}
